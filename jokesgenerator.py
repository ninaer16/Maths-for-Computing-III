# -*- coding: utf-8 -*-
"""JokesGenerator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JQcqjZMLpGfo_DHqpLOHjaXA4VUVB-S5
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, Embedding
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import get_file
import random

# Step 1: Load Jokes from Excel File
file_path = '/content/Book1.xlsx'
df = pd.read_excel(file_path)

# Assuming your Excel sheet has a column 'joke'
jokes = df['Jokes'].dropna().tolist()

# Step 2: Preprocess Data
# Join all jokes together to create a single string of jokes
text = " ".join(jokes)

# Create a set of all unique characters
chars = sorted(list(set(text)))
char_to_index = {char: index for index, char in enumerate(chars)}
index_to_char = {index: char for index, char in enumerate(chars)}

# Convert text to numerical data (index of each character)
sequence_length = 100
sequences = []
next_chars = []
for i in range(0, len(text) - sequence_length, 1):
    sequences.append(text[i:i + sequence_length])
    next_chars.append(text[i + sequence_length])

# Convert sequences to numerical data
X = np.zeros((len(sequences), sequence_length, len(chars)), dtype=bool)
y = np.zeros((len(sequences), len(chars)), dtype=bool)

for i, sequence in enumerate(sequences):
    for t, char in enumerate(sequence):
        X[i, t, char_to_index[char]] = 1
    y[i, char_to_index[next_chars[i]]] = 1

# Step 3: Build the LSTM Model
model = Sequential()
model.add(LSTM(128, input_shape=(X.shape[1], X.shape[2]), return_sequences=True))
model.add(Dropout(0.2))
model.add(LSTM(128))
model.add(Dropout(0.2))
model.add(Dense(len(chars), activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001))

# Step 4: Train the Model
model.fit(X, y, batch_size=128, epochs=20)

# Step 5: Generate Jokes (stop at ".")
def generate_lstm_joke(seed_text, length=100):
    generated_text = seed_text
    for _ in range(length):
        X_pred = np.zeros((1, len(seed_text), len(chars)))
        for t, char in enumerate(seed_text):
            if char in char_to_index:  # Handle missing characters gracefully
                X_pred[0, t, char_to_index[char]] = 1
            else:
                continue
        preds = model.predict(X_pred, verbose=0)
        next_index = np.argmax(preds)
        next_char = index_to_char[next_index]
        generated_text += next_char
        seed_text = seed_text[1:] + next_char

        # Stop if a period (".") is encountered
        if next_char == ".":
            break  # Stop the generation loop immediately

    # Extract up to the first period to ensure only one sentence is returned
    first_period_index = generated_text.find(".") + 1
    return generated_text[:first_period_index].strip()  # Return only the first sentence

# Step 6: Continuously prompt the user to generate jokes
while True:
    user_input = input("Do you want to generate a joke? Type 'yes' to continue or 'quit' to exit: ").strip().lower()
    if user_input == 'quit':
        print("\nGoodbye!")
        break
    elif user_input == 'yes':
        # Pick a random starting seed from the jokes list
        seed_text = random.choice(jokes)

        # Generate the joke based on the random seed
        generated_joke = generate_lstm_joke(seed_text)
        print("\nGenerated Joke:", generated_joke)
        print("\n")
    else:
        print("\nInvalid input. Please type 'yes' or 'quit'.")
        print("\n")

df['Jokes'].describe()
df['Jokes'].str.len().describe()  # Length of each joke

df['Word_Count'] = df['Jokes'].str.split().str.len()
df['Char_Count'] = df['Jokes'].str.len()

import matplotlib.pyplot as plt
df['Char_Count'].plot(kind='hist', bins=20, title='Character Count Distribution')
plt.show()

from collections import Counter
words = ' '.join(df['Jokes']).split()
common_words = Counter(words).most_common(10)
words, counts = zip(*common_words)
plt.bar(words, counts)
plt.title('Top 10 Common Words')
plt.show()

from wordcloud import WordCloud
text = ' '.join(df['Jokes'])
wordcloud = WordCloud().generate(text)
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

df.plot(x='Word_Count', y='Char_Count', kind='scatter', title='Word vs. Character Count')
plt.show()

